// Global variables
var xpos1=0;
var ypos1 = 0;
var xpos2 = 0;
var ypos2 = 0;
var color = "";
// Function to listen for the User
// See bottom of JS doc for paramater explanation
function hear(mode,option) {
// HTML elements and local variables
var record=document.getElementById("record");
var transcript = '';
const words = [];
var text = document.getElementById("instructions");
var numInput='';
var canvas = document.getElementById("canvas");
const ctx = canvas.getContext("2d");
ctx.restore();
// See if browser supports speech recognition and initialize it (generated by ChatGPT )
if ('webkitSpeechRecognition' in window) {
    recognition = new window.webkitSpeechRecognition();
} else {
    record.innerHTML = "It looks like the browser doesn't support speech recognition. Please use Google Chrome or Microsoft Edge.";
    window.alert(record.innerHTML);
    return; // Stop listening and come out of function since speech recognition is not there
}
// Speech recognition properties, such as language and allow continuous results 
recognition.lang = 'en-US';
recognition.continuous = true;
var MODE=mode;
// If mode is undefined, then get the mode that we are drawing from.
if (MODE=== undefined) {
    // Gets the dropdown menu value
    MODE=document.getElementById("mode").value;
}
// If recognition object exists, do this:(try/catch block written by ChatGPT but everything inside of it is written by me (except when noted))
try {
    recognition.start(); // Starts recognition
    record.innerHTML = `Recording for ${MODE}...`; // User interface to tell if it's recording or not

    // Once the speech recognition has caught something do this:
    recognition.onresult = function (event) {
        transcript = event.results[event.results.length - 1][0].transcript; // Gets transcript of the speech recognition
        // Delays the speech recognition so it doesn't capture blank spaces
        setTimeout(() => {
            var word = "";
          
            words.unshift(transcript.split(".")); // Splits what we said into an array of words based on fullstops
            word = words[0];
            word = word.toString(); // Converts it into a string
            word = word.replace(" ", ''); // Gets rid of the spaces
            word = word.replace(",", ''); // Gets rid of commas
            word = word.trim();
            word = word.toLowerCase(); // Transforms it into lowercase
            recognition.stop();
            
            record.innerHTML = `Transcript:${word}`;
            var width = canvas.style.width;
            var height = canvas.style.height;
            switch (MODE) {
                case "num":
                    // Gets the user to speak a number, and it outputs it to the canvas
                    numInput = parseInt(word);
                    switch (option) {
                        case 1: // Button 1-width 
                            width = numInput;
                            canvas.style.width = width + "px";
                            canvas.width = width;
                            record.innerHTML = `Last Transcript:${word}`;
                            text.innerHTML = `Please use the options and mode buttons to control the drawing. Press the record buttons to start drawing. Here is the manual, <a href="https://docs.google.com/document/d/1B87BVl7SGmXUvrwKbjfIh403Q3YyrV2B2ZtxMEt-7w0/edit?usp=sharing">Help</a><br> x1:${xpos1}<br> y1:${ypos1}<br> x2:${xpos2}<br> y2:${ypos2}<br> width:${width}<br> height:${height}`;
                            break;
                        case 2: // Button 2-height
                            height = numInput;
                            canvas.style.height = height + "px";
                            canvas.height = height;
                            record.innerHTML = `Last Transcript:${word}`;
                            text.innerHTML = `Please use the options and mode buttons to control the drawing. Press the record buttons to start drawing. Here is the manual, <a href="https://docs.google.com/document/d/1B87BVl7SGmXUvrwKbjfIh403Q3YyrV2B2ZtxMEt-7w0/edit?usp=sharing">Help</a><br> x1:${xpos1}<br> y1:${ypos1}<br> x2:${xpos2}<br> y2:${ypos2}<br> width:${width}<br> height:${height}`;
                            break;
                        case 3: // Button 3 x1
                            xpos1 = numInput;
                            record.innerHTML = `Last Transcript:${word}`;
                            text.innerHTML = `Please use the options and mode buttons to control the drawing. Press the record buttons to start drawing. Here is the manual, <a href="https://docs.google.com/document/d/1B87BVl7SGmXUvrwKbjfIh403Q3YyrV2B2ZtxMEt-7w0/edit?usp=sharing">Help</a><br> x1:${xpos1}<br> y1:${ypos1}<br> x2:${xpos2}<br> y2:${ypos2}<br> width:${width}<br> height:${height}`;
                            break;
                        case 4: // Button 4 y1
                            ypos1 = numInput;
                            record.innerHTML = `Last Transcript:${word}`;
                            text.innerHTML = `Please use the options and mode buttons to control the drawing. Press the record buttons to start drawing. Here is the manual, <a href="https://docs.google.com/document/d/1B87BVl7SGmXUvrwKbjfIh403Q3YyrV2B2ZtxMEt-7w0/edit?usp=sharing">Help</a><br> x1:${xpos1}<br> y1:${ypos1}<br> x2:${xpos2}<br> y2:${ypos2}<br> width:${width}<br> height:${height}`;
                            break;
                        case 5: // Button 5 x2
                            xpos2 = numInput;
                            record.innerHTML = `Last Transcript:${word}`;
                            text.innerHTML = `Please use the options and mode buttons to control the drawing. Press the record buttons to start drawing. Here is the manual, <a href="https://docs.google.com/document/d/1B87BVl7SGmXUvrwKbjfIh403Q3YyrV2B2ZtxMEt-7w0/edit?usp=sharing">Help</a><br> x1:${xpos1}<br> y1:${ypos1}<br> x2:${xpos2}<br> y2:${ypos2}<br> width:${width}<br> height:${height}`;
                            break;
                        case 6: // Button 6 y2
                            ypos2 = numInput;
                            record.innerHTML = `Last Transcript:${word}`;
                            text.innerHTML = `Please use the options and mode buttons to control the drawing. Press the record buttons to start drawing. Here is the manual, <a href="https://docs.google.com/document/d/1B87BVl7SGmXUvrwKbjfIh403Q3YyrV2B2ZtxMEt-7w0/edit?usp=sharing">Help</a><br> x1:${xpos1}<br> y1:${ypos1}<br> x2:${xpos2}<br> y2:${ypos2}<br> width:${width}<br> height:${height}`;
                            break;
                        default: // Only if I make a mistake by not defining an option. (More options will be available in the future)
                            record.innerHTML = `An error occurred. Error code:${option}`;
                            break;
                    }
                    break;
                case "str":
                    // Gets the user to speak a string
                    switch (option) {
                        case 1: // Button 7 Fill color
                            ctx.fillStyle = word;
                            record.innerHTML = `Last Transcript:${word}`;
                            text.innerHTML = `Please use the options and mode buttons to control the drawing. Press the record buttons to start drawing. Here is the manual, <a href="https://docs.google.com/document/d/1B87BVl7SGmXUvrwKbjfIh403Q3YyrV2B2ZtxMEt-7w0/edit?usp=sharing">Help</a><br> x1:${xpos1}<br> y1:${ypos1}<br> x2:${xpos2}<br> y2:${ypos2}<br> width:${width}<br> height:${height}`;
                            break;
                        case 2: // Button 8 Line color
                            ctx.strokeStyle = word;
                            record.innerHTML = `Last Transcript:${word}`;
                            text.innerHTML = `Please use the options and mode buttons to control the drawing. Press the record buttons to start drawing. Here is the manual, <a href="https://docs.google.com/document/d/1B87BVl7SGmXUvrwKbjfIh403Q3YyrV2B2ZtxMEt-7w0/edit?usp=sharing">Help</a><br> x1:${xpos1}<br> y1:${ypos1}<br> x2:${xpos2}<br> y2:${ypos2}<br> width:${width}<br> height:${height}`;
                            break;
                        default:
                            break;
                    }
                    break;
                case "tool": // Gets the user to speak a tool command
                    const cx = Math.abs(xpos1 - xpos2); // Delta x
                    const cy = Math.abs(ypos1 - ypos2); // Delta y
                    var radius = Math.sqrt(Math.pow(cx, 2) + Math.pow(cy, 2)) / 2; // Pythagoras for the radius if available
                    switch (word) {
                        case "line": // Line tool
                            ctx.moveTo(xpos1, ypos1); // First point of the line
                            ctx.lineTo(xpos2, ypos2); // Second point of the line
                            ctx.stroke(); // Draw the line
                            record.innerHTML = `Last Transcript:${word}`;
                            break;
                        case "quad": // Rectangle/square tool
                            ctx.fillRect(xpos1, ypos1, cx, cy); // Draw the quad with a specified width and height
                            record.innerHTML = `Last Transcript:${word}`;
                            break;
                        case "circle": // Circle tool (WIP)
                            ctx.arc(xpos1, ypos1, radius, 0, 2 * Math.PI); // Draw circle with given radius (2 Pi radians)
                            ctx.stroke();
                            record.innerHTML = `Last Transcript:${word}`;
                            break;
                        case "curve": // Curve tool (WIP)
                            const angle = Math.atan2(cy, cx); // Calculate angle using x and y positions (ChatGPT gave me formula)
                            ctx.moveTo(xpos1, ypos1); // Move to position
                            ctx.arc(xpos2, ypos2, radius, 0, angle); // Draw angle with given radius and angle
                            ctx.stroke();
                            record.innerHTML = `Last Transcript:${word}`;
                            break;
                        default:
                            record.innerHTML = `${word} is not an available tool`;
                            break;
                    }
                    break;
                case "utility": // Gets the user to speak a utility command
                    switch (word) {
                        case "help": // Brings the user to the Help document
                            window.open("https://docs.google.com/document/d/1B87BVl7SGmXUvrwKbjfIh403Q3YyrV2B2ZtxMEt-7w0/edit?usp=sharing", "_blank");
                            break;
                        case "reset": // Reloads the page (resets all values)
                            window.alert("This will reset the drawing and any values stored!");
                            location.reload();
                            break;
                        case "clear": // Clears the canvas
                            window.alert("This will clear the canvas!");
                            ctx.clearRect(0, 0, width, height);
                            break;
                        case "save": // Saves the drawing
                            window.alert("The drawing is now saved!");
                            ctx.save();
                            break;
                        default:
                            record.innerHTML = `${word} is not an available utility`;
                            break;
                    }
                    break;
                default: // Only if I make a mistake by not spelling the modes correctly
                    record.innerHTML = `${MODE} is not defined! Please report it as a bug.`;
                    break;
            }

        }, 5000); // Time delay in milliseconds - when it will execute
    }
    // If the recognition has found an error report it to console
    recognition.onerror = function (event) {
        window.alert(`${event.error} has occurred during speech recognition. We are going to refresh the page to help fix this error.`);
        recognition.stop();
        location.reload();
    }; 
} catch (error) {// Catch code generated by ChatGPT
    if (error instanceof TypeError) {
        record.innerHTML = `It looks like the browser doesn't support speech recognition. Please use Google Chrome or Microsoft Edge.`;
        window.alert(record.innerHTML);
    } else {
        window.alert(`It looks like another error has occurred. Refreshing the page for you now.`);
        location.reload();
    }
}
}
/*Modes are things that are usable in speech recognition
They are broken down into three categories
Options
Tools
Utilities
There is a help document (work in progress) that explains these in more detail*/
